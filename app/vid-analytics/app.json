[{"name":"app.R","content":"# Packages ----\r\nlibrary(shiny)\r\nlibrary(bslib)\r\nlibrary(tidyverse)\r\nlibrary(htmltools)\r\nlibrary(plotly)\r\n\r\n# Data ----\r\nload(url(\"https://raw.githubusercontent.com/ydkristanto/vids-analysis/main/datasets/vid_data.RData\"))\r\n# Further readings: https://nrennie.rbind.io/blog/webr-shiny-tidytuesday/\r\n\r\n# Links ----\r\nothers_link <- tags$a(\r\n  shiny::icon(\"shapes\"),\r\n  \"Lainnya\",\r\n  href = \"https://people.usd.ac.id/~ydkristanto/index.php/media-pengajaran/\",\r\n  target = \"_blank\"\r\n)\r\ngithub_link <- tags$a(\r\n  shiny::icon(\"github\"),\r\n  \"Github\",\r\n  href = \"https://github.com/ydkristanto/vids-analysis\",\r\n  target = \"_blank\"\r\n)\r\n\r\n# User interface ----\r\nui <- page_navbar(\r\n  title = \"Video Analytics\",\r\n  id = \"vid_analytics\",\r\n  ## Sidebar ----\r\n  sidebar = sidebar(\r\n    ## Explorer sidebar ----\r\n    conditionalPanel(\r\n      \"input.vid_analytics === 'Explorer'\",\r\n      accordion(\r\n        ### Statistics ----\r\n        accordion_panel(\r\n          title = \"Statistics\",\r\n          selectInput(\r\n            \"stat\", \"Choose statistics:\",\r\n            c(\"Basic Statistics\", \"Retention\"),\r\n            selected = \"Basic Statistics\"\r\n          ),\r\n          conditionalPanel(\r\n            condition = \"input.stat == 'Basic Statistics'\",\r\n            selectInput(\r\n              \"period\", \"Daily/monthly:\",\r\n              c(\"Daily\", \"Monthly\"),\r\n              selected = \"Daily\"\r\n            ),\r\n            selectInput(\r\n              \"chart\", \"Chart:\",\r\n              c(\"Heatmap\", \"Line\"),\r\n              selected = \"Heatmap\"\r\n            )\r\n          ),\r\n          conditionalPanel(\r\n            condition = \"input.stat == 'Retention'\",\r\n            selectInput(\r\n              \"time_type\", \"Time:\",\r\n              c(\"Real (minutes)\", \"Ratio\"),\r\n              selected = \"Percentage\"\r\n            )\r\n          )\r\n        ),\r\n        ### Filter ----\r\n        accordion_panel(\r\n          title = \"Filter\",\r\n          conditionalPanel(\r\n            condition = \"input.stat == 'Basic Statistics'\",\r\n            #### daterange ----\r\n            dateRangeInput(\r\n              \"daterange\", \"Date Range:\",\r\n              start = \"2020-09-14\",\r\n              end = \"2020-12-31\",\r\n              min = \"2020-09-01\",\r\n              max = \"2021-12-31\",\r\n              format = \"dd/mm/yy\",\r\n              separator = \" - \"\r\n            )\r\n          ),\r\n          conditionalPanel(\r\n            condition = \"input.stat == 'Retention'\",\r\n            #### year ----\r\n            checkboxGroupInput(\r\n              \"year\", \"Years:\",\r\n              c(\"2020\", \"2021\"),\r\n              selected = \"2020\"\r\n            ),\r\n          ),\r\n          #### length ----\r\n          sliderInput(\r\n            \"length\", \"Video lengths (mins):\",\r\n            min = 0, max = 20, value = c(3, 10), step = 0.1, ticks = FALSE\r\n          ),\r\n          #### sections ----\r\n          checkboxGroupInput(\r\n            \"sections\", \"Sections:\",\r\n            c(\r\n              \"Equations & Graphs\" = 1,\r\n              \"Functions\" = 2,\r\n              \"Rational Functions\" = 3,\r\n              \"Exponentials & Logarithmic Functions\" = 4,\r\n              \"Trigonometric Functions\" = 5\r\n            ),\r\n            selected = 1:5\r\n          ),\r\n          #### lesson_position ----\r\n          checkboxGroupInput(\r\n            \"lesson_position\", \"Lesson position in a section:\",\r\n            c(\r\n              \"1\" = 1,\r\n              \"2\" = 2,\r\n              \"3\" = 3,\r\n              \"4\" = 4,\r\n              \"5\" = 5,\r\n              \"6\" = 6,\r\n              \"7\" = 7,\r\n              \"8\" = 8\r\n            ),\r\n            selected = 1:8,\r\n            inline = TRUE\r\n          ),\r\n          #### vid_position ----\r\n          checkboxGroupInput(\r\n            \"vid_position\", \"Video position in a lesson:\",\r\n            1:6,\r\n            selected = 1:6,\r\n            inline = TRUE\r\n          ),\r\n          #### talking_head ----\r\n          checkboxGroupInput(\r\n            \"talking_head\", \"Talking head:\",\r\n            c(\r\n              \"Yes\" = 1,\r\n              \"No\" = 0\r\n            ),\r\n            selected = c(0, 1),\r\n            inline = TRUE\r\n          )\r\n        ),\r\n        multiple = FALSE,\r\n        open = \"Statistics\"\r\n      )\r\n    ),\r\n    conditionalPanel(\r\n      \"input.vid_analytics === 'Information'\",\r\n      h4(\"Description\",\r\n         style = \"font-size: inherit; font-weight: bold\"\r\n      ),\r\n      p(\"This Shiny dashboard explore statistics of 92 Algebra and Trigonometry instructional videos from 2020 and 2021.\"),\r\n      hr(),\r\n      h4(\"MIT License\", style = \"font-size: inherit; font-weight: bold\"),\r\n      p(\"Copyright Â© 2024 Yosep Dwi Kristanto\")\r\n    )\r\n  ),\r\n  ## Explorer ----\r\n  nav_panel(\r\n    title = \"Explorer\",\r\n    layout_columns(\r\n      ### contents_value ----\r\n      value_box(\r\n        title = \"Contents\",\r\n        value = textOutput(\"contents_value\"),\r\n        showcase = shiny::icon(\"circle-play\")\r\n      ),\r\n      ### views_value ----\r\n      value_box(\r\n        title = \"Views\",\r\n        value = textOutput(\"views_value\"),\r\n        showcase = shiny::icon(\"binoculars\")\r\n      ),\r\n      ### watch_time_value ----\r\n      value_box(\r\n        title = \"Watch time (hours)\",\r\n        value = textOutput(\"watch_time_value\"),\r\n        showcase = shiny::icon(\"stopwatch\")\r\n      ),\r\n      ### plot_output ----\r\n      card(\r\n        plotlyOutput(\"plot_output\"),\r\n        full_screen = TRUE\r\n      ),\r\n      col_widths = c(4, 4, 4, 12),\r\n      row_heights = c(1, 3)\r\n    ),\r\n    icon = shiny::icon(\"chart-simple\")\r\n  ),\r\n  ## Information ----\r\n  nav_panel(\r\n    title = \"Information\",\r\n    layout_column_wrap(\r\n      width = 1 / 2,\r\n      navset_card_underline(\r\n        ### About ----\r\n        nav_panel(\r\n          title = \"About\",\r\n          p(\"This Shiny dashboard explores statistics from 92 Algebra and Trigonometry instructional videos, a course within the Mathematics Education department at Sanata Dharma University, Yogyakarta, Indonesia. The main focus of the statistics are two: the number of views per video per day/month and viewer retention per video. Additionally, the dashboard also displays accumulations from multiple videos, including the number of views and watch time (hours).\"),\r\n          p(\"Through exploration via this dashboard, users are expected to observe learner behavior while watching instructional videos. Information about this behavior is important for educators who are also content creators of instructional videos.\")\r\n        ),\r\n        nav_panel(\r\n          ### Tools ----\r\n          title = \"Tools\",\r\n          p(\"This dashboard was developed using the R programming language and the Shiny package. The shinylive package was utilized to export this application so it can be run in a web browser without a separate R server. The dashboard layout is structured using bslib.\"),\r\n          p(\"All statistical charts in this dashboard are created using the ggplot2 package. The dplyr package is used to manipulate data obtained from OECD. Both of these packages are part of the tidyverse meta-package.\")\r\n        ),\r\n        nav_panel(\r\n          ### Developer ----\r\n          title = \"Developer\",\r\n          p(\"The developer and maintainer of this application is \", a(\"Yosep Dwi Kristanto,\", href = \"https://people.usd.ac.id/~ydkristanto\", target = \"_blank\"), \" a lecturer and researcher in \", a(\"the Mathematics Education department\", href = \"https://usd.ac.id/s1pmat\", target = \"_blank\"), \" at \", a(\"Sanata Dharma University,\", href = \"https://www.usd.ac.id/\", target = \"_blank\"), \" Yogyakarta, Indonesia.\")\r\n        ),\r\n        nav_panel(\r\n          ### Source Code ----\r\n          title = \"Source Code\",\r\n          p(\"The source code of this application is available on \", a(\"GitHub repository.\", href = \"https://github.com/ydkristanto/vids-analysis\", target = \"_blank\"), \" If you would like to report any issues or request additional features for this application, please \", a(\"create an issue\", href = \"https://github.com/ydkristanto/vids-analysis/issues\", target = \"_blank\"), \" or, even better, submit a pull request in the repository.\")\r\n        )\r\n      ),\r\n      ### Data ----\r\n      card(\r\n        card_header(\"Data\"),\r\n        p(\"The data used in this dashboard spans from September 14, 2020, to December 28, 2021. This period was chosen because, during that time frame, the videos were used in online distance learning, coinciding with the COVID-19 pandemic.\"),\r\n        p(\"The videos are organized into lessons. These lessons form a topic. These topics are the main components of the Algebra and Trigonometry course. Therefore, the data used includes variables such as vid_position (video position within a lesson), lesson_position (lesson position within a topic), and topic_id (topic names, for example, 'Equations & Graphs').\")\r\n      )\r\n    ),\r\n    icon = shiny::icon(\"circle-info\")\r\n  ),\r\n  nav_spacer(),\r\n  nav_menu(\r\n    title = \"Links\",\r\n    nav_item(others_link),\r\n    nav_item(github_link),\r\n    icon = shiny::icon(\"link\"),\r\n    align = \"right\"\r\n  )\r\n)\r\n\r\n# Server ----\r\nserver <- function(input, output, session) {\r\n  ## video_info_dat ----\r\n  video_info_dat <- reactive({\r\n    # Temp vars for filter\r\n    min_length <- input$length[1]\r\n    max_length <- input$length[2]\r\n    sect <- input$sections\r\n    lesson_pos <- input$lesson_position\r\n    vid_pos <- input$vid_position\r\n    head <- input$talking_head\r\n\r\n    dat <- video_info %>%\r\n      filter(\r\n        duration >= min_length,\r\n        duration <= max_length,\r\n        topic_id %in% sect,\r\n        lesson_position %in% lesson_pos,\r\n        vid_position %in% vid_pos,\r\n        talking_head %in% head\r\n      )\r\n    dat\r\n  })\r\n\r\n  ## basic_stats_dat ----\r\n  basic_stats_dat <- reactive({\r\n    # Temp vars for filter\r\n    min_daterange <- input$daterange[1]\r\n    max_daterange <- input$daterange[2]\r\n    min_length <- input$length[1]\r\n    max_length <- input$length[2]\r\n    sect <- input$sections\r\n    lesson_pos <- input$lesson_position\r\n    vid_pos <- input$vid_position\r\n    head <- input$talking_head\r\n\r\n    # Apply filter\r\n    dat <- basic_stats_data %>%\r\n      filter(\r\n        topic_id %in% sect,\r\n        lesson_position %in% lesson_pos,\r\n        vid_position %in% vid_pos,\r\n        talking_head %in% head,\r\n        day >= min_daterange,\r\n        day <= max_daterange,\r\n        duration >= min_length,\r\n        duration <= max_length\r\n      )\r\n    dat\r\n  })\r\n\r\n  ## retention_dat ----\r\n  retention_dat <- reactive({\r\n    # Temp vars for filter\r\n    year_input <- input$year\r\n    min_length <- input$length[1]\r\n    max_length <- input$length[2]\r\n    sect <- input$sections\r\n    lesson_pos <- input$lesson_position\r\n    vid_pos <- input$vid_position\r\n    head <- input$talking_head\r\n\r\n    # Apply filter\r\n    dat <- retention_data %>%\r\n      filter(\r\n        year %in% year_input,\r\n        duration >= min_length,\r\n        duration <= max_length,\r\n        topic_id %in% sect,\r\n        lesson_position %in% lesson_pos,\r\n        vid_position %in% vid_pos,\r\n        talking_head %in% head\r\n      )\r\n    dat\r\n  })\r\n\r\n  ## contents_value ----\r\n  output$contents_value <- renderText({\r\n    n <- video_info_dat() %>%\r\n      distinct(vid_id) %>%\r\n      nrow()\r\n\r\n    n\r\n  })\r\n\r\n  ## views_value ----\r\n  output$views_value <- renderText({\r\n    # Temp vars for filter\r\n    min_length <- input$length[1]\r\n    max_length <- input$length[2]\r\n    sect <- input$sections\r\n    lesson_pos <- input$lesson_position\r\n    vid_pos <- input$vid_position\r\n    head <- input$talking_head\r\n    year_input <- input$year\r\n\r\n    if (input$stat == \"Basic Statistics\") {\r\n      n <- sum(basic_stats_dat()$views)\r\n    } else {\r\n      data <- basic_stats_data %>%\r\n        mutate(year_stat = year(day)) %>%\r\n        filter(\r\n          topic_id %in% sect,\r\n          lesson_position %in% lesson_pos,\r\n          vid_position %in% vid_pos,\r\n          talking_head %in% head,\r\n          year_stat %in% year_input,\r\n          duration >= min_length,\r\n          duration <= max_length\r\n        )\r\n      n <- sum(data$views)\r\n    }\r\n    n\r\n  })\r\n\r\n  ## watch_time_value ----\r\n  output$watch_time_value <- renderText({\r\n    # Temp vars for filter\r\n    min_length <- input$length[1]\r\n    max_length <- input$length[2]\r\n    sect <- input$sections\r\n    lesson_pos <- input$lesson_position\r\n    vid_pos <- input$vid_position\r\n    head <- input$talking_head\r\n    year_input <- input$year\r\n\r\n    if (input$stat == \"Basic Statistics\") {\r\n      n <- sum(basic_stats_dat()$estimatedMinutesWatched)\r\n    } else {\r\n      data <- basic_stats_data %>%\r\n        mutate(year_stat = year(day)) %>%\r\n        filter(\r\n          topic_id %in% sect,\r\n          lesson_position %in% lesson_pos,\r\n          vid_position %in% vid_pos,\r\n          talking_head %in% head,\r\n          year_stat %in% year_input,\r\n          duration >= min_length,\r\n          duration <= max_length\r\n        )\r\n      n <- sum(data$estimatedMinutesWatched)\r\n    }\r\n    round(n / 60, 2)\r\n  })\r\n\r\n  ## plot_output ----\r\n  output$plot_output <- renderPlotly({\r\n    if (input$stat == \"Basic Statistics\") {\r\n      if (input$period == \"Daily\") {\r\n        if (input$chart == \"Heatmap\") {\r\n          p <- basic_stats_dat() %>% \r\n            mutate(\r\n              vid_seq = 100 * topic_id + 10 * lesson_id + vid_position\r\n            ) %>% \r\n            mutate(vid_title = fct_reorder(vid_title, vid_seq)) %>% \r\n            ggplot(aes(x = day, y = vid_title, fill = views)) +\r\n            geom_tile() +\r\n            scale_fill_viridis_c(name = \"Views\") +\r\n            theme_minimal() +\r\n            theme(\r\n              axis.text.y = element_blank(),\r\n              axis.title.y = element_blank()\r\n            ) +\r\n            labs(\r\n              x = \"Day\"\r\n            )\r\n          plot <- ggplotly(p)\r\n        } else if (input$chart == \"Line\") {\r\n          plot <- plot_ly(\r\n            basic_stats_dat(), x = ~day, y = ~views, color = ~vid_title,\r\n            type = \"scatter\", mode = \"lines\"\r\n          )%>% \r\n            layout(xaxis = list(title = \"Day\"), \r\n                   yaxis = list(title = \"Views\"))\r\n        }\r\n      } else if(input$period == \"Monthly\") {\r\n        data <- basic_stats_dat() %>% \r\n          mutate(\r\n            vid_seq = 100 * topic_id + 10 * lesson_id + vid_position,\r\n            month = format(day, \"%Y-%m\")\r\n          ) %>% \r\n          select(vid_seq, vid_title, day, month, views) %>% \r\n          arrange(vid_seq, day) %>% \r\n          group_by(vid_seq, vid_title, month) %>% \r\n          summarise(views_month = sum(views))\r\n        if (input$chart == \"Heatmap\") {\r\n          p <- data %>% \r\n            mutate(vid_title = fct_reorder(vid_title, vid_seq)) %>% \r\n            ggplot(aes(x = month, y = vid_title, fill = views_month)) +\r\n            geom_tile() +\r\n            scale_fill_viridis_c(name = \"Views\") +\r\n            theme_minimal() +\r\n            theme(\r\n              axis.text.y = element_blank(),\r\n              axis.title.y = element_blank()\r\n            ) +\r\n            labs(\r\n              x = \"Month\"\r\n            )\r\n          plot <- ggplotly(p)\r\n        } else if (input$chart == \"Line\") {\r\n          plot <- plot_ly(\r\n            data, x = ~month, y = ~views_month, color = ~vid_title,\r\n            type = \"scatter\", mode = \"lines\"\r\n          ) %>% \r\n            layout(xaxis = list(title = \"Month\"), \r\n                   yaxis = list(title = \"Views\"))\r\n        }\r\n      }\r\n    } else if (input$stat == \"Retention\") {\r\n      if (input$time_type == \"Real (minutes)\") {\r\n        p <- retention_dat() %>% \r\n          ggplot(aes(x = elapsed_time_mins, y = audience_watch_ratio)) +\r\n          geom_point(alpha = .2) +\r\n          geom_smooth() +\r\n          xlim(0, 20) +\r\n          ylim(0, 1.6) +\r\n          theme_minimal() +\r\n          labs(x = \"Elapsed time (minutes)\", y = \"Audience watch ratio\")\r\n        plot <- ggplotly(p)\r\n      } else if (input$time_type == \"Ratio\") {\r\n        p <- retention_dat() %>% \r\n          ggplot(aes(x = elapsed_time_ratio, y = audience_watch_ratio)) +\r\n          geom_point(alpha = .2) +\r\n          geom_smooth() +\r\n          theme_minimal() +\r\n          labs(x = \"Elapsed time (minutes)\", y = \"Audience watch ratio\")\r\n        plot <- ggplotly(p)\r\n      }\r\n      \r\n    }\r\n    \r\n    plot\r\n  })\r\n}\r\n\r\n# App ----\r\nshinyApp(ui, server)\r\n","type":"text"}]
