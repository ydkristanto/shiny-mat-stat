[{"name":"app.R","content":"# Memanggil paket ----\r\nlibrary(shiny)\r\nlibrary(tidyverse)\r\nlibrary(gridExtra)\r\nlibrary(latex2exp)\r\noptions(shiny.mathjax.url = \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js\")\r\n\r\n# Mendefinisikan UI ----\r\nui <- shinyUI(fluidPage(\r\n  title = \"Demonstrasi Teorema Limit Pusat -- Aplikasi Shiny\",\r\n  navbarPage(\"Demonstrasi Teorema Limit Pusat\",\r\n    position = \"static-top\",\r\n    ## Tab proporsi ----\r\n    tabPanel(\r\n      \"Proporsi\",\r\n      sidebarPanel(\r\n        wellPanel(\r\n          sliderInput(\"p_prop\", \"Proporsi populasi:\",\r\n            value = .5,\r\n            step = .01,\r\n            min = 0,\r\n            max = 1\r\n          )\r\n        ),\r\n        wellPanel(\r\n          sliderInput(\"n_prop\", \"Ukuran sampel:\",\r\n            value = 200,\r\n            step = 1,\r\n            min = 2,\r\n            max = 1000\r\n          ),\r\n          hr(),\r\n          sliderInput(\"k_prop\", \"Banyak sampel:\",\r\n            value = 100,\r\n            step = 1,\r\n            min = 10,\r\n            max = 1000\r\n          )\r\n        )\r\n      ),\r\n      mainPanel(\r\n        tabsetPanel(\r\n          type = \"tabs\",\r\n          tabPanel(\r\n            \"Distribusi Populasi\",\r\n            br(),\r\n            plotOutput(\"pop.dist.prop\",\r\n              height = \"450px\"\r\n            )\r\n          ),\r\n          tabPanel(\r\n            \"Beberapa Sampel\",\r\n            br(),\r\n            plotOutput(\"sample.dist.prop\"),\r\n            br(),\r\n            div(h4(textOutput(\"num.samples.prop\")),\r\n              align = \"center\"\r\n            )\r\n          ),\r\n          tabPanel(\r\n            \"Distribusi Sampling\",\r\n            br(),\r\n            plotOutput(\"sampling.dist.prop\"),\r\n            div(textOutput(\"plot.descr.prop\"),\r\n              align = \"center\"\r\n            ),\r\n          )\r\n        )\r\n      )\r\n    ),\r\n    ## Tab rerata ----\r\n    tabPanel(\r\n      \"Rerata\",\r\n      sidebarLayout(\r\n        sidebarPanel(\r\n          wellPanel(\r\n            ### Memilih distribusi ----\r\n            selectInput(\"dist\", \"Distribusi populasi:\",\r\n              c(\r\n                \"Normal\" = \"rnorm\",\r\n                \"Seragam\" = \"runif\",\r\n                \"Condong ke kanan\" = \"rlnorm\",\r\n                \"Condong ke kiri\" = \"rbeta\",\r\n                \"Puncak ganda\" = \"rnorm2\"\r\n              ),\r\n              selected = \"rnorm\"\r\n            ),\r\n            hr(),\r\n            ### Parameter distribusi ----\r\n            uiOutput(\"mu\"),\r\n            uiOutput(\"sd\"),\r\n            uiOutput(\"minmax\"),\r\n            uiOutput(\"skew\"),\r\n            uiOutput(\"shape\")\r\n          ),\r\n          wellPanel(\r\n            ### Memilih ukuran sampel ----\r\n            sliderInput(\"n_rrt\",\r\n              \"Ukuran sampel:\",\r\n              value = 30,\r\n              min = 2,\r\n              max = 500\r\n            ),\r\n            hr(),\r\n            ### Menentukan banyak sampel ----\r\n            sliderInput(\"k_rrt\",\r\n              \"Banyaknya sampel:\",\r\n              value = 200,\r\n              min = 10,\r\n              max = 1000\r\n            )\r\n          )\r\n        ),\r\n        mainPanel(\r\n          tabsetPanel(\r\n            type = \"tabs\",\r\n            ### Tab distribusi populasi ----\r\n            tabPanel(\r\n              title = \"Distribusi Populasi\",\r\n              br(),\r\n              plotOutput(\"pop.dist.rrt\",\r\n                height = \"500px\"\r\n              ),\r\n              br()\r\n            ),\r\n            ### Tab beberapa sampel ----\r\n            tabPanel(\r\n              title = \"Beberapa Sampel\",\r\n              br(),\r\n              plotOutput(\"sample.dist.rrt\"),\r\n              br(),\r\n              div(h4(textOutput(\"num.samples.rrt\")),\r\n                align = \"center\"\r\n              ),\r\n            ),\r\n            ### Tab distribusi sampling ----\r\n            tabPanel(\r\n              title = \"Distribusi Sampling\",\r\n              fluidRow(\r\n                column(\r\n                  width = 12,\r\n                  br(),\r\n                  plotOutput(\"sampling.dist.rrt\"),\r\n                  div(\r\n                    textOutput(\"sampling.descr.rrt\",\r\n                      inline = TRUE\r\n                    ),\r\n                    align = \"center\"\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    ),\r\n    ## Tab informasi ----\r\n    tabPanel(\r\n      \"Informasi\",\r\n      withMathJax(),\r\n      sidebarLayout(\r\n        sidebarPanel(\r\n          wellPanel(\r\n            div(h4(\"Deskripsi\",\r\n              style = \"font-size: inherit;\r\n                                   font-weight: bold\"\r\n            )),\r\n            div(p(\"Aplikasi Shiny ini digunakan untuk mendemonstrasikan Teorema Limit Pusat untuk distribusi sampling proporsi dan rerata.\"))\r\n          ),\r\n          wellPanel(\r\n            div(h4(\"Kode sumber\",\r\n              style = \"font-size: inherit;\r\n                                   font-weight: bold\"\r\n            )),\r\n            div(p(\"Kode sumber aplikasi ini tersedia di repositori\", a(\"Github.\", href = \"https://github.com/ydkristanto/apl-tlp\", target = \"_blank\")))\r\n          ),\r\n          wellPanel(\r\n            div(h4(\"Lisensi\",\r\n              style = \"font-size: inherit;\r\n                                   font-weight: bold\"\r\n            )),\r\n            div(\r\n              p(\"Lisensi MIT\"),\r\n              p(\"Copyright (c) 2024 Yosep Dwi Kristanto\")\r\n            )\r\n          )\r\n        ),\r\n        mainPanel(\r\n          div(h3(\"Aplikasi Shiny Teorema Limit Pusat\")),\r\n          div(p(\"Tujuan aplikasi interaktif ini adalah untuk mendemonstrasikan Teorema Limit Pusat untuk distribusi sampling proporsi dan rerata satu populasi. Beberapa ide penting statistik ditunjukkan oleh aplikasi ini. Ide-ide penting tersebut antara lain adalah sebagai berikut.\"), align = \"justify\"),\r\n          div(tags$ul(\r\n            tags$li(\"Jika ukuran sampelnya cukup besar, distribusi sampling proporsinya mendekati normal.\"),\r\n            tags$li(\"Distribusi sampling proporsi tersebut memiliki rerata sama dengan proporsi populasinya, yaitu \\\\(\\\\mu_{\\\\hat{p}} = p\\\\), dan simpangan bakunya sama dengan akar kuadrat dari hasil kali antara proporsi populasi dan satu dikurangi proporsi tersebut kemudian dibagi dengan ukuran sampel: $$\\\\sigma_{\\\\hat{p}} = \\\\sqrt{\\\\frac{p(1-p)}{n}}$$\"),\r\n            tags$li(\"Jika ukuran sampelnya cukup besar, distribusi sampling rerata sampel mendekati normal.\"),\r\n            tags$li(\"Untuk sampel yang berukuran kecil, distribusi sampling reratanya mendekati normal jika populasi dari sampel tersebut berdistribusi normal.\"),\r\n            tags$li(\"Distribusi sampling rerata tersebut memiliki rerata yang sama dengan rerata populasinya, yaitu \\\\( \\\\mu_{\\\\bar{x}} = \\\\mu \\\\), dan simpangan baku yang sama dengan simpangan baku populasi dibagi dengan akar kuadrat ukuran sampel: $$\\\\sigma_{\\\\bar{x}} = \\\\frac{\\\\sigma}{\\\\sqrt{n}}$$\")\r\n          ), align = \"justify\"),\r\n          hr(),\r\n          div(p(\"Aplikasi interaktif ini dikembangkan dengan menggunakan bahasa pemrogram\", a(\"R\", href = \"https://www.R-project.org/\", target = \"_blank\"), \"dan paket\", a(\"Shiny.\", href = \"https://CRAN.R-project.org/package=shiny\", target = \"_blank\"), \"Paket\", a(\"shinylive\", href = \"https://posit-dev.github.io/r-shinylive/\", target = \"_blank\"), \"digunakan untuk mengekspor aplikasi ini agar dapat dijalankan di peramban web tanpa peladen R yang terpisah.\"), align = \"justify\"),\r\n          div(p(\"Pengembang dan pemelihara aplikasi ini adalah\", a(\"Yosep Dwi Kristanto,\", href = \"https://people.usd.ac.id/~ydkristanto/\", target = \"_blank\"), \"seorang dosen dan peneliti di program studi\", a(\"Pendidikan Matematika,\", href = \"https://usd.ac.id/s1pmat\", target = \"_blank\"), a(\"Universitas Sanata Dharma,\", href = \"https://www.usd.ac.id/\", target = \"_blank\"), \"Yogyakarta. Aplikasi ini merupakan modifikasi dari aplikasi-aplikasi interaktif\", a(\"ShinyEd\", href = \"https://github.com/ShinyEd/intro-stats/\", target = \"_blank\"), \"yang dikembangkan oleh Mine Ã‡etinkaya-Rundel dkk.\"), align = \"justify\"),\r\n          width = 6\r\n        )\r\n      )\r\n    )\r\n  )\r\n))\r\n\r\n# Fungsi peladen ----\r\nseed <- as.numeric(Sys.time())\r\nserver <- shinyServer(function(input, output) {\r\n  ## Fungsi untuk proporsi ----\r\n  rand_draw <- function(n, p) {\r\n    vals <- NULL\r\n    vals <- do.call(rbinom, list(n = n, size = 1, prob = p))\r\n    return(vals)\r\n  }\r\n  rep_rand_draw <- repeatable(rand_draw)\r\n  parent <- reactive({\r\n    n <- 1e5\r\n    return(rep_rand_draw(input$n_prop, input$p_prop))\r\n  })\r\n  samples <- reactive({\r\n    pop <- parent()\r\n    n <- input$n_prop\r\n    k <- input$k_prop\r\n    return(replicate(k, sample(pop, n, replace = TRUE)))\r\n  })\r\n  ### Plot populasi proporsi ----\r\n  output$pop.dist.prop <- renderPlot({\r\n    popsize <- 1000\r\n    counts <- data.frame(\r\n      number = c(\"0\", \"1\"),\r\n      freq = c(\r\n        popsize * (1 - input$p_prop),\r\n        popsize * input$p_prop\r\n      ) / popsize\r\n    )\r\n    ggplot(counts, aes(x = number, y = freq, fill = factor(number))) +\r\n      geom_bar(stat = \"identity\") +\r\n      labs(\r\n        x = \"\", y = \"Frekuensi Relatif\",\r\n        title = paste0(\"Distribusi populasi: p = \", input$p_prop),\r\n        size = 14, face = \"bold\"\r\n      ) +\r\n      scale_y_continuous(limits = c(0, 1)) +\r\n      scale_fill_brewer(palette = \"Dark2\") +\r\n      theme_bw(base_size = 16) +\r\n      theme(legend.position = \"none\")\r\n  })\r\n  ### Plot beberapa sampel proporsi ----\r\n  output$sample.dist.prop <- renderPlot({\r\n    x <- samples()\r\n    plot <- list()\r\n    for (i in 1:8) {\r\n      df <- tibble(obs = x[, i])\r\n      counts <- df %>% count(obs)\r\n      plot[[i]] <- ggplot(counts, aes(x = obs, y = n, fill = factor(obs))) +\r\n        geom_bar(stat = \"identity\") +\r\n        scale_y_continuous(limits = c(0, 1.2 * max(counts$n))) +\r\n        scale_x_discrete(limits = c(0, 1)) +\r\n        scale_fill_brewer(palette = \"Dark2\") +\r\n        theme_bw(base_size = 12) +\r\n        theme(legend.position = \"none\") +\r\n        labs(\r\n          x = \"\", y = \"Frekuensi\",\r\n          title = paste(\"Sampel\", i), size = 14, face = \"bold\"\r\n        )\r\n      mean_samp <- round(mean(x[, i]), 2)\r\n      sd_samp <- round(sd(x[, i]), 2)\r\n      y_pos <- max(counts$n) + 0.07 * max(counts$n)\r\n      # #added if statement to check if count 1 or count 2 are NA. this check\r\n      # #eliminated the error messages in the app\r\n      if (!is.na(counts$n[1]) & !is.na(counts$n[2])) {\r\n        if (counts$n[1] > counts$n[2]) {\r\n          plot[[i]] <- plot[[i]] +\r\n            annotate(\"text\",\r\n              x = 1, y = y_pos,\r\n              label = paste(\r\n                \"p_topi =\",\r\n                bquote(.(mean_samp))\r\n              ),\r\n              color = \"black\", size = 3\r\n            )\r\n        } else {\r\n          plot[[i]] <- plot[[i]] +\r\n            annotate(\"text\",\r\n              x = 0, y = y_pos,\r\n              label = paste(\r\n                \"p_topi =\",\r\n                bquote(.(mean_samp))\r\n              ),\r\n              color = \"black\", size = 3\r\n            )\r\n        }\r\n      } else {\r\n        plot[[i]] <- plot[[i]] +\r\n          annotate(\"text\",\r\n            x = 0.5, y = y_pos,\r\n            label = paste(\"p_topi =\", bquote(.(mean_samp))),\r\n            color = \"black\", size = 3\r\n          )\r\n      }\r\n    }\r\n    grid.arrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]],\r\n      plot[[5]], plot[[6]], plot[[7]], plot[[8]],\r\n      ncol = 4\r\n    )\r\n  })\r\n  # teks\r\n  output$num.samples.prop <- renderText({\r\n    k <- input$k_prop\r\n    paste0(\"... dan seterusnya sampai sampel ke-\", k, \".\")\r\n  })\r\n  ### Plot distribusi sampling proporsi ----\r\n  output$sampling.dist.prop <- renderPlot({\r\n    n <- input$n_prop\r\n    p <- input$p_prop\r\n    k <- input$k_prop\r\n    pop <- parent()\r\n    ndist <- tibble(means = colMeans(samples()))\r\n\r\n    ndens <- density(ndist$means)\r\n    nhist <- hist(ndist$means, plot = FALSE)\r\n\r\n    m_samp <- round(mean(ndist$means), 2)\r\n    sd_samp <- round(sd(ndist$means), 2)\r\n    sd_teor <- sqrt(p * (1 - p) / n)\r\n\r\n    x_range <- max(ndist$means) - min(ndist$means)\r\n    y_pos <- max(ndens$y) - 0.1 * max(ndens$y)\r\n    x_pos <- if_else(m_samp > 0, min(ndist$means) + 0.1 * x_range, max(ndist$means) - 0.1 * x_range)\r\n\r\n    # minor change in the way the title is displayed\r\n\r\n    ggplot(ndist, aes(x = ndist$means)) +\r\n      geom_histogram(aes(y = after_stat(density)),\r\n        bins = 20, color = \"white\"\r\n      ) +\r\n      stat_density(geom = \"line\", size = 1) +\r\n      labs(\r\n        title = paste(\"Distribusi sampling proporsi*:\"),\r\n        x = \"Proporsi sampel\",\r\n        y = \"\"\r\n      ) +\r\n      annotate(\"text\",\r\n        x = x_pos, y = y_pos,\r\n        label = paste(\"rerata p_topi\", \"=\", bquote(.(m_samp)), \"\\n\", \"SD p_topi \", \"=\", bquote(.(sd_samp))),\r\n        color = \"black\", size = 5\r\n      ) +\r\n      theme_bw(base_size = 17)\r\n  })\r\n\r\n  # text\r\n  output$plot.descr.prop <- renderText({\r\n    n <- input$n_prop\r\n    p <- input$p_prop\r\n    k <- input$k_prop\r\n\r\n    paste(\"*Distribusi proporsi \", k,\r\n      \" sampel acak, masing-masing\\nmemuat \", n,\r\n      \" observasi dari populasi\",\r\n      sep = \"\"\r\n    )\r\n  })\r\n  ## Fungsi untuk rerata ----\r\n  ### Slider rerata untuk distribusi normal ----\r\n  output$mu <- renderUI({\r\n    if (input$dist == \"rnorm\") {\r\n      sliderInput(\"mu\",\r\n        \"Rerata:\",\r\n        value = 0,\r\n        min = -40,\r\n        max = 50\r\n      )\r\n    }\r\n  })\r\n\r\n  ### Slider simpangan baku untuk distribusi normal ----\r\n  output$sd <- renderUI({\r\n    if (input$dist == \"rnorm\") {\r\n      sliderInput(\"sd\",\r\n        \"Simpangan baku:\",\r\n        value = 20,\r\n        min = 1,\r\n        max = 30\r\n      )\r\n    }\r\n  })\r\n\r\n  ### Slider minmaks untuk distribusi seragam ----\r\n  output$minmax <- renderUI({\r\n    if (input$dist == \"runif\") {\r\n      sliderInput(\"minmax\",\r\n        \"Batas bawah dan batas atas\",\r\n        value = c(5, 15),\r\n        min = 0,\r\n        max = 20\r\n      )\r\n    }\r\n  })\r\n\r\n  ### Memastikan jangkauan untuk distribusi seragam != 0 ----\r\n  observeEvent(input$minmax, {\r\n    req(input$minmax)\r\n\r\n    if (input$minmax[1] == input$minmax[2]) {\r\n      if (input$minmax[1] == 0) {\r\n        updateSliderInput(session, \"minmax\", value = c(0, 1))\r\n      } else if (input$minmax[2] == 20) {\r\n        updateSliderInput(session, \"minmax\", value = c(19, 20))\r\n      } else {\r\n        updateSliderInput(session, \"minmax\", value = c(input$minmax[2], input$minmax[2] + 1))\r\n      }\r\n    }\r\n  })\r\n\r\n  ### Slider kecondongan untuk rlnorm dan rbeta ----\r\n  output$skew <- renderUI({\r\n    if (input$dist == \"rlnorm\" | input$dist == \"rbeta\") {\r\n      selectInput(\r\n        inputId = \"skew\",\r\n        label = \"Kecondongan:\",\r\n        choices = c(\r\n          \"Rendah\" = \"low\",\r\n          \"Sedang\" = \"med\",\r\n          \"Tinggi\" = \"high\"\r\n        ),\r\n        selected = \"low\"\r\n      )\r\n    }\r\n  })\r\n\r\n  ### Pilihan bentuk untuk rnorm2 ----\r\n  output$shape <- renderUI({\r\n    if (input$dist == \"rnorm2\") {\r\n      selectInput(\r\n        inputId = \"shape\",\r\n        label = \"Bentuk:\",\r\n        choices = c(\r\n          \"Bentuk 1\" = \"shape1\",\r\n          \"Bentuk 2\" = \"shape2\",\r\n          \"Bentuk 3\" = \"shape3\"\r\n        ),\r\n        selected = \"shape1\"\r\n      )\r\n    }\r\n  })\r\n\r\n  ### Membuat sampel-sampel random ----\r\n  # Mendefinisikan fungsi untuk distribusi puncak ganda\r\n  rnorm2 <- function(n, mu1, mu2, sd) {\r\n    return(c(\r\n      rnorm(n = round(2 / 5 * n), mean = mu1, sd = sd),\r\n      rnorm(n = n - round(2 / 5 * n), mean = mu2, sd = sd)\r\n    ))\r\n  }\r\n  rand_draw_rrt <- function(dist, n, mu, sd, min, max, skew, shape) {\r\n    vals <- NULL\r\n\r\n    if (dist == \"rbeta\") {\r\n      req(skew)\r\n      if (skew == \"low\") {\r\n        vals <- do.call(dist, list(n = n, shape1 = 5, shape2 = 2))\r\n      } else if (skew == \"med\") {\r\n        vals <- do.call(dist, list(n = n, shape1 = 5, shape2 = 1.5))\r\n      } else if (skew == \"high\") {\r\n        vals <- do.call(dist, list(n = n, shape1 = 5, shape2 = 1))\r\n      }\r\n    } else if (dist == \"rnorm\") {\r\n      req(mu, sd)\r\n      vals <- do.call(dist, list(n = n, mean = mu, sd = sd))\r\n    } else if (dist == \"rlnorm\") {\r\n      req(skew)\r\n      if (skew == \"low\") {\r\n        vals <- do.call(dist, list(n = n, meanlog = 0, sdlog = .25))\r\n      } else if (skew == \"med\") {\r\n        vals <- do.call(dist, list(n = n, meanlog = 0, sdlog = .5))\r\n      } else if (skew == \"high\") {\r\n        vals <- do.call(dist, list(n = n, meanlog = 0, sdlog = 1))\r\n      }\r\n    } else if (dist == \"runif\") {\r\n      req(min, max)\r\n      vals <- do.call(dist, list(n = n, min = min, max = max))\r\n    } else if (dist == \"rnorm2\") {\r\n      req(shape)\r\n      if (shape == \"shape1\") {\r\n        vals <- do.call(dist, list(n = n, mu1 = 30, mu2 = 70, sd = 8))\r\n      } else if (shape == \"shape2\") {\r\n        vals <- do.call(dist, list(n = n, mu1 = 70, mu2 = 30, sd = 10))\r\n      } else if (shape == \"shape3\") {\r\n        vals <- do.call(dist, list(n = n, mu1 = 30, mu2 = 70, sd = 12))\r\n      }\r\n    }\r\n    return(vals)\r\n  }\r\n\r\n  rep_rand_draw_rrt <- repeatable(rand_draw_rrt)\r\n\r\n  ### Mendefinisikan beberapa variabel reaktif lainnya ----\r\n  parent_rrt <- reactive({\r\n    n_sample_rrt <- 1e5\r\n    return(rep_rand_draw_rrt(\r\n      input$dist, n_sample_rrt, input$mu, input$sd,\r\n      input$minmax[1], input$minmax[2], input$skew,\r\n      input$shape\r\n    ))\r\n  })\r\n  samples_rrt <- reactive({\r\n    pop <- parent_rrt()\r\n    n <- input$n_rrt\r\n    k <- input$k_rrt\r\n    return(replicate(k, sample(pop, n, replace = TRUE)))\r\n  })\r\n  u_min <- reactive({\r\n    req(input$minmax)\r\n    return(input$minmax[1])\r\n  })\r\n  u_max <- reactive({\r\n    req(input$minmax)\r\n    return(input$minmax[2])\r\n  })\r\n  ### plot 1 a) ----\r\n  output$pop.dist.rrt <- renderPlot({\r\n    distname <- switch(input$dist,\r\n      rnorm = \"Distribusi populasi: Normal\",\r\n      rlnorm = \"Distribusi populasi: Condong ke kanan\",\r\n      rbeta = \"Distribusi populasi: Condong ke kiri\",\r\n      runif = \"Distribusi populasi: Seragam\",\r\n      rnorm2 = \"Distribusi populasi: Puncak ganda\"\r\n    )\r\n    pop <- parent_rrt()\r\n\r\n    m_pop <- round(mean(pop), 2)\r\n    sd_pop <- round(sd(pop), 2)\r\n\r\n    pop <- tibble(samples = pop)\r\n    pdens <- density(pop$samples)\r\n\r\n    x_range <- max(pop$samples) - min(pop$samples)\r\n    y_pos <- max(pdens$y) - 0.2 * max(pdens$y)\r\n\r\n    if (input$dist == \"rnorm\") {\r\n      req(input$mu)\r\n      mu <- input$mu\r\n\r\n      x_pos <- ifelse(mu > 0, min(-100, min(pop$samples)) + 20,\r\n        max(100, max(pop$samples)) - 20\r\n      )\r\n\r\n      ggplot(data = pop, aes(x = samples, y = after_stat(density))) +\r\n        geom_histogram(bins = 45, color = \"white\") +\r\n        # geom_density() + draws a weird baseline. using stat_density() instead.\r\n        stat_density(geom = \"line\", size = 2) +\r\n        scale_x_continuous(limits = c(min(-100, pop$samples), max(100, pop$samples))) +\r\n        labs(title = distname, x = \"x\") +\r\n        annotate(\"text\",\r\n          x = x_pos, y = y_pos,\r\n          label = paste(\r\n            \"rerata x\", \"=\", bquote(.(m_pop)),\r\n            \"\\n\", \"simpangan baku x\", \"=\", bquote(.(sd_pop))\r\n          ),\r\n          color = \"black\", size = 5\r\n        ) +\r\n        theme_bw(base_size = 19)\r\n    } else if (input$dist == \"runif\") {\r\n      if (u_min() == u_max()) {\r\n        \"  \" # this is to temporarily prevent graph from displaying while\r\n        # observeEvent is fixing the range.\r\n      } else {\r\n        x_pos <- max(pop$samples) - 0.1 * x_range\r\n\r\n        ggplot(data = pop, aes(x = samples, y = ..density..)) +\r\n          geom_histogram(bins = 45, color = \"white\") +\r\n          stat_density(geom = \"line\", size = 2) +\r\n          scale_y_continuous(expand = expand_scale(mult = c(0, .3))) +\r\n          labs(title = distname, x = \"x\") +\r\n          annotate(\"text\",\r\n            x = x_pos, y = y_pos + 0.5 * max(pdens$y),\r\n            label = paste(\r\n              \"rerata x\", \"=\", bquote(.(m_pop)),\r\n              \"\\n\", \"simpangan baku x\", \"=\", bquote(.(sd_pop))\r\n            ),\r\n            color = \"black\", size = 5\r\n          ) +\r\n          theme_bw(base_size = 19)\r\n      }\r\n    } else if (input$dist == \"rlnorm\") {\r\n      x_pos <- max(pop$samples) - 0.1 * x_range\r\n\r\n      ggplot(data = pop, aes(x = samples, y = ..density..)) +\r\n        geom_histogram(bins = 45, color = \"white\") +\r\n        stat_density(geom = \"line\", size = 2) +\r\n        labs(title = distname, x = \"x\") +\r\n        annotate(\"text\",\r\n          x = x_pos, y = y_pos,\r\n          label = paste(\r\n            \"rerata x\", \"=\", bquote(.(m_pop)),\r\n            \"\\n\", \"simpangan baku x\", \"=\", bquote(.(sd_pop))\r\n          ),\r\n          color = \"black\", size = 5\r\n        ) +\r\n        theme_bw(base_size = 19)\r\n    } else if (input$dist == \"rbeta\") {\r\n      x_pos <- min(pop$samples) + 0.1 * x_range\r\n\r\n      ggplot(data = pop, aes(x = samples, y = ..density..)) +\r\n        geom_histogram(bins = 45, color = \"white\") +\r\n        stat_density(geom = \"line\", size = 2) +\r\n        labs(title = distname, x = \"x\") +\r\n        annotate(\"text\",\r\n          x = x_pos, y = y_pos,\r\n          label = paste(\r\n            \"rerata x\", \"=\", bquote(.(m_pop)),\r\n            \"\\n\", \"simpangan baku x\", \"=\", bquote(.(sd_pop))\r\n          ),\r\n          color = \"black\", size = 5\r\n        ) +\r\n        theme_bw(base_size = 19)\r\n    } else if (input$dist == \"rnorm2\") {\r\n      x_pos <- min(pop$samples) + 0.1 * x_range\r\n\r\n      ggplot(data = pop, aes(x = samples, y = ..density..)) +\r\n        geom_histogram(bins = 45, color = \"white\") +\r\n        stat_density(geom = \"line\", size = 2) +\r\n        labs(title = distname, x = \"x\") +\r\n        annotate(\"text\",\r\n          x = x_pos, y = y_pos,\r\n          label = paste(\r\n            \"rerata x\", \"=\", bquote(.(m_pop)),\r\n            \"\\n\", \"simpangan baku x\", \"=\", bquote(.(sd_pop))\r\n          ),\r\n          color = \"black\", size = 5\r\n        ) +\r\n        theme_bw(base_size = 19)\r\n    }\r\n  })\r\n  ### Plot beberapa sampel ----\r\n  output$sample.dist.rrt <- renderPlot({\r\n    y <- samples_rrt()\r\n    x <- samples_rrt() %>% as_tibble()\r\n\r\n    plots <- list(rep(NA, 8))\r\n\r\n    for (i in 1:8) {\r\n      mean <- round(mean(y[, i]), 2)\r\n      sd <- round(sd(y[, i]), 2)\r\n\r\n      x_range <- max(y[, i]) - min(y[, i])\r\n      pdens <- density(y[, i])\r\n\r\n      x_pos <- ifelse(input$dist == \"rbeta\", min(y[, i]) + 0.1 * x_range,\r\n        max(y[, i]) - 0.1 * x_range\r\n      )\r\n\r\n      plots[[i]] <- ggplot(x, aes_string(x = paste0(\"V\", i))) +\r\n        geom_dotplot(\r\n          alpha = 0.8, dotsize = 0.7,\r\n          fill = \"#1b9e77\", color = \"#1b9e77\"\r\n        ) +\r\n        geom_segment(\r\n          aes(\r\n            x = mean(y[, i]), y = 0,\r\n            xend = mean(y[, i]), yend = Inf\r\n          ),\r\n          color = \"#d95f02\", alpha = .6\r\n        ) +\r\n        labs(title = paste(\"Sampel\", i, sep = \" \"), x = \"\", y = \"\") +\r\n        theme_bw(base_size = 13) +\r\n        annotate(\"text\",\r\n          x = x_pos, y = 1.8,\r\n          label = paste(\r\n            \"x_bar\", \"=\", bquote(.(mean)),\r\n            \"\\n\", \"SD\", \"=\", bquote(.(sd))\r\n          ),\r\n          color = \"black\", size = 3\r\n        ) +\r\n        scale_y_continuous(limits = c(0, 2), breaks = NULL) +\r\n        theme(\r\n          panel.grid.major = element_blank(),\r\n          panel.grid.minor = element_blank()\r\n        )\r\n    }\r\n\r\n    grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]],\r\n      plots[[6]], plots[[7]], plots[[8]],\r\n      ncol = 4\r\n    )\r\n  })\r\n\r\n\r\n\r\n  # Teks untuk plot beberapa sampel\r\n  output$num.samples.rrt <- renderText({\r\n    k <- input$k_rrt\r\n    paste0(\"... dan seterusnya sampai sampel ke-\", k, \".\")\r\n  })\r\n\r\n  ### Plot distribusi sampling rerata ----\r\n  output$sampling.dist.rrt <- renderPlot({\r\n    distname <- switch(input$dist,\r\n      rnorm = \"populasi normal\",\r\n      rlnorm = \"populasi condong ke kanan\",\r\n      rbeta = \"populasi condong ke kiri\",\r\n      runif = \"populasi seragam\"\r\n    )\r\n\r\n    n <- input$n_rrt\r\n    k <- input$k_rrt\r\n\r\n    pop <- parent_rrt()\r\n\r\n    m_pop <- round(mean(pop), 2)\r\n    sd_pop <- round(sd(pop), 2)\r\n\r\n    ndist <- tibble(means = colMeans(samples_rrt()))\r\n\r\n    m_samp <- round(mean(ndist$means), 2)\r\n    sd_samp <- round(sd(ndist$means), 2)\r\n\r\n    ndens <- density(ndist$means)\r\n    nhist <- hist(ndist$means, plot = FALSE)\r\n\r\n    x_range <- max(ndist$means) - min(ndist$means)\r\n\r\n    y_pos <- max(ndens$y) - 0.1 * max(ndens$y)\r\n    x_pos <- ifelse(m_samp > 0, min(ndist$means) + 0.1 * x_range,\r\n      max(ndist$means) - 0.1 * x_range\r\n    )\r\n\r\n    p <- ggplot(data = ndist, aes(x = means, y = after_stat(density))) +\r\n      geom_histogram(\r\n        bins = 20, color = \"white\", fill = \"#d95f02\",\r\n        alpha = .6\r\n      ) +\r\n      stat_density(geom = \"line\", size = 2) +\r\n      labs(\r\n        title = paste(\"Distribusi sampling rerata*\"),\r\n        x = \"Rerata sampel\",\r\n        y = \"\"\r\n      ) +\r\n      annotate(\"text\",\r\n        x = x_pos, y = y_pos,\r\n        label = paste(\r\n          \"rerata x_bar\", \"=\", bquote(.(m_samp)),\r\n          \"\\n\", \"simpangan baku x_bar\", \"=\", bquote(.(sd_samp))\r\n        ),\r\n        color = \"black\", size = 5\r\n      ) +\r\n      theme_bw(base_size = 19)\r\n\r\n    if (input$dist == \"runif\") {\r\n      if (u_min() == u_max()) {\r\n        \" \"\r\n      } else {\r\n        p\r\n      }\r\n    } else {\r\n      p\r\n    }\r\n  })\r\n\r\n  ### Deskripsi plot distribusi sampling rerata ----\r\n  output$sampling.descr.rrt <- renderText({\r\n    distname <- switch(input$dist,\r\n      rnorm = \"populasi normal\",\r\n      rlnorm = \"populasi condong ke kanan\",\r\n      rbeta = \"populasi condong ke kiri\",\r\n      runif = \"populasi seragam\"\r\n    )\r\n\r\n    k <- input$k_rrt\r\n    n <- input$n_rrt\r\n    paste(\"*Distribusi rerata dari\", k, \"sampel acak,\r\n          masing-masing memuat\", n, \" observasi\r\n          dari sebuah\", distname)\r\n  })\r\n})\r\n\r\n# Membuat objek aplikasi Shiny ----\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
